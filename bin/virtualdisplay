#!/bin/bash

main() {
  case $1 in
    setRes)
      setRes "${@:2}"
    ;;
    calcRes)
      calcRes "${@:2}"
    ;;
    clean)
      clean "${@:2}"
    ;;
    start)
      start "${@:2}"
    ;;
    window)
      window "${@:2}"
    ;;
    *)
      help
    ;;
  esac
}

setRes() {
  virtual=$1
  width=$2
  height=$3
  primary=$4

  modeline=$(cvt $width $height 20 | grep "Modeline" | cut -d' ' -f 2-17)
  modeName=$(echo $modeline | cut -d' ' -f 1)

  modeline=${modeline//\"}
  modeName=${modeName//\"}
  newModeName=$(echo $modeName | cut -d'_' -f1)
  modeline=${modeline/$modeName/$newModeName}
  modeName=$newModeName

  if [[ -z $primary ]]; then
    primary=$(xrandr| grep primary | cut -d ' ' -f 1)
  fi

  echo Creating \"$modeName\" on \"$virtual\"
  xrandr --newmode $modeline
  xrandr --addmode $virtual $modeName
  xrandr --output $virtual --mode $modeName --auto --below $primary
}

calcRes() {
  w_width=$1
  w_height=$2
  w_inches=$3

  f_xrandr=$(xrandr | grep primary)
  f_res=$(echo $f_xrandr | cut -d' ' -f 4)
  f_res=(${f_res//[+x]/ })
  f_dimens=$(echo $f_xrandr | cut -d' ' -f 13,15)
  f_dimens=(${f_dimens//m/})

  f_width=${f_res[0]}
  f_height=${f_res[1]}
  f_inches=$(bc <<< "scale=2; (sqrt( ${f_dimens[0]}^2 + ${f_dimens[1]}^2 ) * 0.0393701)/1")

  proportion=$(bc <<< "scale=4; $w_inches / $f_inches")

  v_width=$(bc <<< "scale=0; ($w_width * $proportion)/1")
  v_height=$(bc <<< "scale=0; ($w_height * $proportion)/1")

  rv_vert_width=$f_width
  rv_vert_height=$(bc <<< "scale=0; ($f_height + $v_height)/1")

  rv_hori_width=$(bc <<< "scale=0; ($f_width + $v_width)/1")
  rv_hori_height=$f_height

  echo Proportion $proportion
  echo "            Width x Height Inches"
  echo "  physical  ${f_width}x${f_height} $f_inches"
  echo "    wanted  ${w_width}x${w_height} $w_inches"
  echo "----------------------------  Virtual"
  echo "   virtual  ${v_width}x${v_height}"
  echo "----------------------------  Resize + virtual"
  echo "  vertical  ${rv_vert_width}x${rv_vert_height}"
  echo "horizontal  ${rv_hori_width}x${rv_hori_height}"
}

clean() {
  display=VIRTUAL$1
  mode=$(xrandr | grep -A 1 $display | grep -Po "\d+x\d+")

  if [ -z "$mode" ]; then
    echo "Can't find a valid mode"
    exit 1
  fi

  echo "display $display"
  echo "   mode $mode"

  for m in $mode ; do
    echo "Try to remove $m"
    xrandr --output $display --off
    xrandr --delmode $display $m
    xrandr --rmmode $m
  done
}

start() {
  x11vnc -display :0 -clip xinerama$1 -forever -xrandr -shared -repeat -noxdamage "${@:2}"
}

window() {
  echo Click on wanted window to start VNC
  winId=$(xwininfo | grep -Eio "Window id: (0x\w+)" | cut -d' ' -f3)
  title=$(xprop -id $winId | awk '/_NET_WM_NAME/{$1=$2="";print}' | cut -d'"' -f2)
  echo Window id $winId - \"$title\"
  x11vnc -forever -shared -repeat -noxdamage -id $winId "$@"
}

help() {
cat <<TEXT
Virtual Display

Commands
 setRes <display> <width> <height> [<display to the left>]
  - set resolution for a virtual display
    example 1: $0 setRes VIRTUAL1 800 600
    example 2: $0 setRes VIRTUAL1 800 600 HDMI1

 calcRes <width> <height> <inches>
  - calculate possible resolutions for a device.
    As devices may have same or even greater resolutions compared to a normal display, the idea is to use a lower resolution for this device. This leads to a better visualization and performance.

 clean <virtual display number>
  - clean modes and resolution, also turns virtual display off
    example: $0 clean 1

VNC wrapper

Commands:
 start <display> [x11vnc args]
  - start VNC for given display
    example: $0 start 1 -scale 1/2:nb -ncache 0
      This will start VNC using scale 1/2 without bleeding and 0 cache

 window [x11vnc args]
  - start VNC for a window, you will need to click on desired window

TEXT
}

main "$@"
